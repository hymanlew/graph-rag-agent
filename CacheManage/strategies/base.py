from abc import ABC, abstractmethod


class CacheKeyStrategy(ABC):
    """
    缓存键生成策略的抽象基类
    
    这是一个策略模式的实现，定义了缓存键生成的统一接口。
    通过继承此类并实现 generate_key 方法，可以创建不同的缓存键生成策略。
    
    设计目的:
    1. 解耦缓存键生成逻辑与缓存存储逻辑
    2. 支持多种缓存策略的灵活切换
    3. 便于测试和扩展新策略
    4. 遵循开闭原则，对扩展开放，对修改关闭
    
    不同的策略可以满足不同的场景需求:
    - 简单查询缓存
    - 上下文感知缓存
    - 会话隔离缓存
    - 全局共享缓存
    """
    
    @abstractmethod
    def generate_key(self, query: str, **kwargs) -> str:
        """
        抽象方法：生成缓存键
        
        所有具体策略都必须实现此方法，负责根据查询和上下文生成唯一的缓存键。
        
        参数:
            query: 查询字符串，通常是用户的输入或请求
            **kwargs: 额外的上下文参数，如会话ID、线程ID、时间戳等
            
        返回:
            str: 生成的唯一缓存键，通常是经过哈希处理的字符串
        """
        pass